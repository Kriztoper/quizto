{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\nexport const api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the JWT token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const login = credentials => {\n  const {\n    username,\n    password\n  } = credentials;\n  return api.post('/auth/login', {\n    username,\n    password\n  });\n};\nexport const register = userData => {\n  const {\n    username,\n    password,\n    email,\n    role\n  } = userData;\n  return api.post('/auth/register', {\n    username,\n    password,\n    email,\n    role: role.toUpperCase()\n  });\n};\n\n// API methods\nconst apiMethods = {\n  // Auth methods\n  login: credentials => {\n    const {\n      username,\n      password\n    } = credentials;\n    return api.post('/auth/login', {\n      username,\n      password\n    });\n  },\n  register: userData => {\n    const {\n      username,\n      password,\n      email,\n      role\n    } = userData;\n    return api.post('/auth/register', {\n      username,\n      password,\n      email,\n      role: role.toUpperCase()\n    });\n  },\n  // Exam methods\n  createExam: examData => api.post('/exam', examData, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  getExams: () => api.get('/exam'),\n  getExam: id => api.get(`/exam/${id}`),\n  submitExam: (id, answers) => api.post(`/exam/${id}/submit`, answers),\n  deleteExam: id => api.delete(`/exam/${id}`)\n};\nexport default apiMethods;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","login","credentials","username","password","post","register","userData","email","role","toUpperCase","apiMethods","createExam","examData","getExams","get","getExam","id","submitExam","answers","deleteExam","delete"],"sources":["/Users/kriztoperurmeneta/Development/quizto/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api';\n\nexport const api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to add the JWT token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const login = (credentials) => {\n  const { username, password } = credentials;\n  return api.post('/auth/login', { username, password });\n};\n\nexport const register = (userData) => {\n  const { username, password, email, role } = userData;\n  return api.post('/auth/register', { username, password, email, role: role.toUpperCase() });\n};\n\n// API methods\nconst apiMethods = {\n  // Auth methods\n  login: (credentials) => {\n    const { username, password } = credentials;\n    return api.post('/auth/login', { username, password });\n  },\n\n  register: (userData) => {\n    const { username, password, email, role } = userData;\n    return api.post('/auth/register', { username, password, email, role: role.toUpperCase() });\n  },\n\n  // Exam methods\n  createExam: (examData) => api.post('/exam', examData, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }),\n  getExams: () => api.get('/exam'),\n  getExam: (id) => api.get(`/exam/${id}`),\n  submitExam: (id, answers) => api.post(`/exam/${id}/submit`, answers),\n  deleteExam: (id) => api.delete(`/exam/${id}`)\n};\n\nexport default apiMethods;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC9BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMG,KAAK,GAAIC,WAAW,IAAK;EACpC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGF,WAAW;EAC1C,OAAOhB,GAAG,CAACmB,IAAI,CAAC,aAAa,EAAE;IAAEF,QAAQ;IAAEC;EAAS,CAAC,CAAC;AACxD,CAAC;AAED,OAAO,MAAME,QAAQ,GAAIC,QAAQ,IAAK;EACpC,MAAM;IAAEJ,QAAQ;IAAEC,QAAQ;IAAEI,KAAK;IAAEC;EAAK,CAAC,GAAGF,QAAQ;EACpD,OAAOrB,GAAG,CAACmB,IAAI,CAAC,gBAAgB,EAAE;IAAEF,QAAQ;IAAEC,QAAQ;IAAEI,KAAK;IAAEC,IAAI,EAAEA,IAAI,CAACC,WAAW,CAAC;EAAE,CAAC,CAAC;AAC5F,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG;EACjB;EACAV,KAAK,EAAGC,WAAW,IAAK;IACtB,MAAM;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGF,WAAW;IAC1C,OAAOhB,GAAG,CAACmB,IAAI,CAAC,aAAa,EAAE;MAAEF,QAAQ;MAAEC;IAAS,CAAC,CAAC;EACxD,CAAC;EAEDE,QAAQ,EAAGC,QAAQ,IAAK;IACtB,MAAM;MAAEJ,QAAQ;MAAEC,QAAQ;MAAEI,KAAK;MAAEC;IAAK,CAAC,GAAGF,QAAQ;IACpD,OAAOrB,GAAG,CAACmB,IAAI,CAAC,gBAAgB,EAAE;MAAEF,QAAQ;MAAEC,QAAQ;MAAEI,KAAK;MAAEC,IAAI,EAAEA,IAAI,CAACC,WAAW,CAAC;IAAE,CAAC,CAAC;EAC5F,CAAC;EAED;EACAE,UAAU,EAAGC,QAAQ,IAAK3B,GAAG,CAACmB,IAAI,CAAC,OAAO,EAAEQ,QAAQ,EAAE;IACpDxB,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACFyB,QAAQ,EAAEA,CAAA,KAAM5B,GAAG,CAAC6B,GAAG,CAAC,OAAO,CAAC;EAChCC,OAAO,EAAGC,EAAE,IAAK/B,GAAG,CAAC6B,GAAG,CAAC,SAASE,EAAE,EAAE,CAAC;EACvCC,UAAU,EAAEA,CAACD,EAAE,EAAEE,OAAO,KAAKjC,GAAG,CAACmB,IAAI,CAAC,SAASY,EAAE,SAAS,EAAEE,OAAO,CAAC;EACpEC,UAAU,EAAGH,EAAE,IAAK/B,GAAG,CAACmC,MAAM,CAAC,SAASJ,EAAE,EAAE;AAC9C,CAAC;AAED,eAAeN,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}