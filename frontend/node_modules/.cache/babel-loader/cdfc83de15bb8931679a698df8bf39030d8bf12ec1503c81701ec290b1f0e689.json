{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\nexport const api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the JWT token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nconst apiService = {\n  // Auth methods\n  login: credentials => {\n    const {\n      username,\n      password\n    } = credentials;\n    return api.post('/auth/login', {\n      username,\n      password\n    });\n  },\n  register: userData => {\n    const {\n      username,\n      password,\n      email,\n      role\n    } = userData;\n    return api.post('/auth/register', {\n      username,\n      password,\n      email,\n      role: role.toUpperCase()\n    });\n  },\n  // Exam methods\n  createExam: examData => {\n    return api.post('/exam', examData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  },\n  getExams: () => api.get('/exam'),\n  getExam: id => api.get(`/exam/${id}`),\n  updateExam: (id, examData) => api.put(`/exam/${id}`, examData),\n  submitExam: (id, answers) => api.post(`/exam/${id}/submit`, answers),\n  deleteExam: id => api.delete(`/exam/${id}`),\n  getLastSubmission: id => api.get(`/exam/${id}/last-submission`)\n};\nexport const {\n  login,\n  register,\n  createExam,\n  getExams,\n  getExam,\n  submitExam,\n  deleteExam,\n  updateExam,\n  getLastSubmission\n} = apiService;\nexport default apiService;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","apiService","login","credentials","username","password","post","register","userData","email","role","toUpperCase","createExam","examData","getExams","get","getExam","id","updateExam","put","submitExam","answers","deleteExam","delete","getLastSubmission"],"sources":["/Users/kriztoperurmeneta/Development/quizto/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api';\n\nexport const api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to add the JWT token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nconst apiService = {\n  // Auth methods\n  login: (credentials) => {\n    const { username, password } = credentials;\n    return api.post('/auth/login', { username, password });\n  },\n\n  register: (userData) => {\n    const { username, password, email, role } = userData;\n    return api.post('/auth/register', { username, password, email, role: role.toUpperCase() });\n  },\n\n  // Exam methods\n  createExam: (examData) => {\n    return api.post('/exam', examData, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  },\n\n  getExams: () => api.get('/exam'),\n  getExam: (id) => api.get(`/exam/${id}`),\n  updateExam: (id, examData) => api.put(`/exam/${id}`, examData),\n  submitExam: (id, answers) => api.post(`/exam/${id}/submit`, answers),\n  deleteExam: (id) => api.delete(`/exam/${id}`),\n  getLastSubmission: (id) => api.get(`/exam/${id}/last-submission`)\n};\n\nexport const { login, register, createExam, getExams, getExam, submitExam, deleteExam, updateExam, getLastSubmission } = apiService;\n\nexport default apiService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC9BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,MAAMG,UAAU,GAAG;EACjB;EACAC,KAAK,EAAGC,WAAW,IAAK;IACtB,MAAM;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGF,WAAW;IAC1C,OAAOjB,GAAG,CAACoB,IAAI,CAAC,aAAa,EAAE;MAAEF,QAAQ;MAAEC;IAAS,CAAC,CAAC;EACxD,CAAC;EAEDE,QAAQ,EAAGC,QAAQ,IAAK;IACtB,MAAM;MAAEJ,QAAQ;MAAEC,QAAQ;MAAEI,KAAK;MAAEC;IAAK,CAAC,GAAGF,QAAQ;IACpD,OAAOtB,GAAG,CAACoB,IAAI,CAAC,gBAAgB,EAAE;MAAEF,QAAQ;MAAEC,QAAQ;MAAEI,KAAK;MAAEC,IAAI,EAAEA,IAAI,CAACC,WAAW,CAAC;IAAE,CAAC,CAAC;EAC5F,CAAC;EAED;EACAC,UAAU,EAAGC,QAAQ,IAAK;IACxB,OAAO3B,GAAG,CAACoB,IAAI,CAAC,OAAO,EAAEO,QAAQ,EAAE;MACjCxB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EAEDyB,QAAQ,EAAEA,CAAA,KAAM5B,GAAG,CAAC6B,GAAG,CAAC,OAAO,CAAC;EAChCC,OAAO,EAAGC,EAAE,IAAK/B,GAAG,CAAC6B,GAAG,CAAC,SAASE,EAAE,EAAE,CAAC;EACvCC,UAAU,EAAEA,CAACD,EAAE,EAAEJ,QAAQ,KAAK3B,GAAG,CAACiC,GAAG,CAAC,SAASF,EAAE,EAAE,EAAEJ,QAAQ,CAAC;EAC9DO,UAAU,EAAEA,CAACH,EAAE,EAAEI,OAAO,KAAKnC,GAAG,CAACoB,IAAI,CAAC,SAASW,EAAE,SAAS,EAAEI,OAAO,CAAC;EACpEC,UAAU,EAAGL,EAAE,IAAK/B,GAAG,CAACqC,MAAM,CAAC,SAASN,EAAE,EAAE,CAAC;EAC7CO,iBAAiB,EAAGP,EAAE,IAAK/B,GAAG,CAAC6B,GAAG,CAAC,SAASE,EAAE,kBAAkB;AAClE,CAAC;AAED,OAAO,MAAM;EAAEf,KAAK;EAAEK,QAAQ;EAAEK,UAAU;EAAEE,QAAQ;EAAEE,OAAO;EAAEI,UAAU;EAAEE,UAAU;EAAEJ,UAAU;EAAEM;AAAkB,CAAC,GAAGvB,UAAU;AAEnI,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}