{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\nconst initialState = {\n  exams: [],\n  currentExam: null,\n  loading: false,\n  error: null,\n  timeRemaining: null\n};\nexport const fetchExam = createAsyncThunk('exam/fetchExam', async examId => {\n  const response = await api.getExam(examId);\n  return response.data;\n});\nexport const createExam = createAsyncThunk('exam/createExam', async (examData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.createExam(examData);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Failed to create exam');\n  }\n});\nexport const submitExam = createAsyncThunk('exam/submitExam', async ({\n  examId,\n  answers\n}) => {\n  const response = await api.submitExam(examId, answers);\n  return response.data;\n});\nexport const examSlice = createSlice({\n  name: 'exam',\n  initialState,\n  reducers: {\n    fetchExamsStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchExamsSuccess: (state, action) => {\n      state.loading = false;\n      state.exams = action.payload;\n    },\n    fetchExamsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setCurrentExam: (state, action) => {\n      state.currentExam = action.payload;\n    },\n    createExamSuccess: (state, action) => {\n      state.exams.push(action.payload);\n    },\n    updateExamSuccess: (state, action) => {\n      const index = state.exams.findIndex(exam => exam.id === action.payload.id);\n      if (index !== -1) {\n        state.exams[index] = action.payload;\n      }\n    },\n    deleteExamSuccess: (state, action) => {\n      state.exams = state.exams.filter(exam => exam.id !== action.payload);\n    },\n    setTimeRemaining: (state, action) => {\n      state.timeRemaining = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    // fetchExam\n    builder.addCase(fetchExam.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchExam.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentExam = action.payload;\n    }).addCase(fetchExam.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    })\n    // createExam\n    .addCase(createExam.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createExam.fulfilled, (state, action) => {\n      state.loading = false;\n      state.exams.push(action.payload);\n    }).addCase(createExam.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    })\n    // submitExam\n    .addCase(submitExam.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(submitExam.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentExam = action.payload;\n    }).addCase(submitExam.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  fetchExamsStart,\n  fetchExamsSuccess,\n  fetchExamsFailure,\n  setCurrentExam,\n  createExamSuccess,\n  updateExamSuccess,\n  deleteExamSuccess,\n  setTimeRemaining\n} = examSlice.actions;\nexport default examSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","initialState","exams","currentExam","loading","error","timeRemaining","fetchExam","examId","response","getExam","data","createExam","examData","rejectWithValue","_error$response","_error$response$data","message","submitExam","answers","examSlice","name","reducers","fetchExamsStart","state","fetchExamsSuccess","action","payload","fetchExamsFailure","setCurrentExam","createExamSuccess","push","updateExamSuccess","index","findIndex","exam","id","deleteExamSuccess","filter","setTimeRemaining","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/kriztoperurmeneta/Development/quizto/frontend/src/store/slices/examSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\n\nconst initialState = {\n  exams: [],\n  currentExam: null,\n  loading: false,\n  error: null,\n  timeRemaining: null,\n};\n\nexport const fetchExam = createAsyncThunk(\n  'exam/fetchExam',\n  async (examId) => {\n    const response = await api.getExam(examId);\n    return response.data;\n  }\n);\n\nexport const createExam = createAsyncThunk(\n  'exam/createExam',\n  async (examData, { rejectWithValue }) => {\n    try {\n      const response = await api.createExam(examData);\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(\n        error.response?.data?.message ||\n        error.message ||\n        'Failed to create exam'\n      );\n    }\n  }\n);\n\nexport const submitExam = createAsyncThunk(\n  'exam/submitExam',\n  async ({ examId, answers }) => {\n    const response = await api.submitExam(examId, answers);\n    return response.data;\n  }\n);\n\nexport const examSlice = createSlice({\n  name: 'exam',\n  initialState,\n  reducers: {\n    fetchExamsStart: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n    fetchExamsSuccess: (state, action) => {\n      state.loading = false;\n      state.exams = action.payload;\n    },\n    fetchExamsFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setCurrentExam: (state, action) => {\n      state.currentExam = action.payload;\n    },\n    createExamSuccess: (state, action) => {\n      state.exams.push(action.payload);\n    },\n    updateExamSuccess: (state, action) => {\n      const index = state.exams.findIndex(exam => exam.id === action.payload.id);\n      if (index !== -1) {\n        state.exams[index] = action.payload;\n      }\n    },\n    deleteExamSuccess: (state, action) => {\n      state.exams = state.exams.filter(exam => exam.id !== action.payload);\n    },\n    setTimeRemaining: (state, action) => {\n      state.timeRemaining = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    // fetchExam\n    builder\n      .addCase(fetchExam.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchExam.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentExam = action.payload;\n      })\n      .addCase(fetchExam.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      })\n      // createExam\n      .addCase(createExam.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createExam.fulfilled, (state, action) => {\n        state.loading = false;\n        state.exams.push(action.payload);\n      })\n      .addCase(createExam.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      })\n      // submitExam\n      .addCase(submitExam.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(submitExam.fulfilled, (state, action) => {\n        state.loading = false;\n        state.currentExam = action.payload;\n      })\n      .addCase(submitExam.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const {\n  fetchExamsStart,\n  fetchExamsSuccess,\n  fetchExamsFailure,\n  setCurrentExam,\n  createExamSuccess,\n  updateExamSuccess,\n  deleteExamSuccess,\n  setTimeRemaining,\n} = examSlice.actions;\n\nexport default examSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}